        // Type of functionObject
        type            PODSampler;

        // Where to load it from (if not already in solver)
        libs            ("libPOD.so");

        // Function object enabled flag
        enabled         true;

        // When to output the average fields
        writeControl    timeStep;
           
        interpolationScheme aaa;
        outputGeometryFormat foam;
        surfaces
        (
            Mesh_1
		{
			type sampledEnsightSurfaceMesh;
        		surfaceName "s1.case";
		}

	// OR

	/*
		Mesh_1
		{
			type sampledTriSurfaceMesh;
			surface outlet_1.stl;
			source cells;
		}
	*/
	
        );

	// Time to start snapshoting (seconds)
	// Snapshoting begins from nearest iteration with current time value bigger than PODStartTime.
	// It will agregate a part of time before the PODStartTime: delta T value plus PODStartTime minus current time value
	// type scalar
	PODStartTime		0;

	// Period of each snapshot. It must be >0 and >maxDdeltaT
	// type scalar
	PODdeltaT		0.01;

	// Number of snapshot to make
	// At the 11th of March this value doesn't stop the solver!
	// WARNING! Solver can finish earlier if time ends but nSnapshots aren't reached!
	// type label
	nSnapshots		10;

	// number of modes to use in POD
	// type label
	nmodes 			3;

	// True if you want the case to stop after POD calculation
	// type bool
	// default true
	stopAfterPOD		true;

	// True if you want to save all the initial values before POD calculation;
	// WARNING! It may be big data.
	// type bool
	// default false
	writeInitValues		true;

	// Frequency of initial values writing.
	// Setting this number you choose between calculation speed and amount of snapshots to loose if the case falls.
	// This number means nothing if writeInitValues	== false.
	// type label
	// default 1
	writeFreq		3;

	// True if you want to save all the restored values after POD calculation;
	// WARNING! It may be big data.
	// type bool
	// default false
	writeRestoredValues		true;

	//- Set continueWriting == true if you want to continue sampling after the case stopped before POD
	//- you will need your initValues and timeList to be at the same address as if you restart the sampling!
        continueWriting			false;



//***************************************
